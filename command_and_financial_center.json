import React, { useState, useEffect, useRef } from 'react';

export default function SupremeHeadCommandNexus() {
  const [activeStream, setActiveStream] = useState(null);
  const [totalBalance, setTotalBalance] = useState(847293.67);
  const [dailyEarnings, setDailyEarnings] = useState(12847.23);
  const [weeklyGrowth, setWeeklyGrowth] = useState(8.3);
  const [aiSuggestion, setAiSuggestion] = useState('');
  const [pulseActive, setPulseActive] = useState(false);
  const [oracleMode, setOracleMode] = useState(false);
  const [transactionHistory, setTransactionHistory] = useState([]);
  const [streamMetrics, setStreamMetrics] = useState({});
  const [mysticOverlay, setMysticOverlay] = useState(false);
  const [scarcityTimer, setScarcityTimer] = useState(null);

  // Real-time data simulation
  useEffect(() => {
    const interval = setInterval(() => {
      setTotalBalance(prev => prev + (Math.random() * 100 - 10));
      setDailyEarnings(prev => prev + (Math.random() * 50 - 5));
      setWeeklyGrowth(prev => Math.max(0, prev + (Math.random() * 2 - 1)));
    }, 3000);

    // Oracle suggestions with psychological triggers
    const suggestions = [
      { text: "Ethereum gas fees are 60% lower than usual - prime opportunity for smart contract deployment", urgency: "high", type: "opportunity" },
      { text: "Analysis indicates 73% success rate for launching new venture in Southeast Asia markets", urgency: "medium", type: "strategic" },
      { text: "Warning: Competitor activity detected in your primary revenue stream - defensive measures recommended", urgency: "critical", type: "threat" },
      { text: "Social proof accumulating: 12,847 new followers across platforms this week", urgency: "low", type: "validation" },
      { text: "Limited time: Next 48 hours optimal for major financial moves based on market confluence", urgency: "high", type: "scarcity" }
    ];

    const suggestionTimer = setInterval(() => {
      const suggestion = suggestions[Math.floor(Math.random() * suggestions.length)];
      setAiSuggestion(suggestion);
      if (suggestion.urgency === "high" || suggestion.urgency === "critical") {
        setScarcityTimer(300); // 5 minutes countdown
        setPulseActive(true);
        setTimeout(() => setPulseActive(false), 5000);
      }
    }, 8000);

    return () => {
      clearInterval(interval);
      clearInterval(suggestionTimer);
    };
  }, []);

  // Scarcity countdown effect
  useEffect(() => {
    if (scarcityTimer > 0) {
      const countdown = setTimeout(() => setScarcityTimer(prev => prev - 1), 1000);
      return () => clearTimeout(countdown);
    }
  }, [scarcityTimer]);

  const revenueStreams = [
    {
      name: "Legio Alpha Division",
      type: "AI Consulting Services", 
      status: "active",
      revenue: 284726.43,
      growth: 12.4,
      description: "Strategic intelligence and business automation solutions",
      region: "North America",
      lastActivity: "2 min ago",
      aiConfidence: 94.7,
      nextPayout: "Tomorrow 3:00 PM",
      color: "blue"
    },
    {
      name: "Aria Analytics Syndicate",
      type: "Data Intelligence Platform",
      status: "scaling", 
      revenue: 197583.21,
      growth: 23.8,
      description: "Advanced pattern recognition and predictive modeling services",
      region: "Europe",
      lastActivity: "7 min ago", 
      aiConfidence: 87.2,
      nextPayout: "Friday 9:00 AM",
      color: "purple"
    },
    {
      name: "Capri Execution Network",
      type: "Digital Operations",
      status: "processing",
      revenue: 365984.03,
      growth: 15.9,
      description: "Real-time system control and resource optimization",
      region: "Asia-Pacific",
      lastActivity: "Active now",
      aiConfidence: 91.3,
      nextPayout: "Today 6:00 PM", 
      color: "orange"
    },
    {
      name: "Mythic Content Engine",
      type: "Creative & Narrative",
      status: "emerging",
      revenue: 89247.12,
      growth: 45.2,
      description: "Mystical storytelling and immersive experience creation",
      region: "Global",
      lastActivity: "1 hour ago",
      aiConfidence: 78.9,
      nextPayout: "Next Monday",
      color: "green"
    }
  ];

  const walletOptions = [
    { name: "Primary Treasury", address: "0x742d...3f8e", balance: "2,847.3 ETH", type: "hardware" },
    { name: "Operations Fund", address: "0x156a...9d2c", balance: "$847,293 USDC", type: "multisig" },
    { name: "Emergency Reserve", address: "0x9f4b...7e1a", balance: "47.2 BTC", type: "cold" }
  ];

  const getStatusColor = (status) => {
    switch(status) {
      case 'active': return 'bg-emerald-500/20 text-emerald-400 border-emerald-500/30';
      case 'scaling': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      case 'processing': return 'bg-orange-500/20 text-orange-400 border-orange-500/30';
      case 'emerging': return 'bg-purple-500/20 text-purple-400 border-purple-500/30';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(amount);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const initiateWithdrawal = (stream) => {
    // Sophisticated withdrawal interface with psychological elements
    const confidence = stream.aiConfidence;
    const urgencyLevel = confidence > 90 ? "Optimal timing" : confidence > 80 ? "Good timing" : "Consider waiting";
    
    alert(`Withdrawal Initiated for ${stream.name}\n\nAmount: ${formatCurrency(stream.revenue * 0.1)}\nTiming Analysis: ${urgencyLevel} (${confidence}% AI confidence)\nEstimated Processing: 2-4 hours\n\nTransaction will be sent to your designated wallet.`);
  };

  return (
    <div className={`min-h-screen transition-all duration-1000 ${
      mysticOverlay 
        ? 'bg-gradient-to-br from-indigo-950 via-purple-950 to-black' 
        : 'bg-gradient-to-br from-slate-950 via-gray-950 to-black'
    } text-white relative overflow-hidden`}>
      
      {/* Mystical Overlay Toggle */}
      <div className="fixed top-4 right-4 z-50 flex items-center space-x-4">
        <button
          onClick={() => setMysticOverlay(!mysticOverlay)}
          className={`px-4 py-2 rounded-lg border font-medium text-sm transition-all duration-300 ${
            mysticOverlay 
              ? 'bg-purple-900/50 border-purple-400 text-purple-300 shadow-lg shadow-purple-500/20' 
              : 'bg-gray-900/50 border-gray-500 text-gray-300 hover:border-purple-400'
          }`}
        >
          {mysticOverlay ? '⚡ Reality Mode' : '🔮 Oracle Mode'}
        </button>
      </div>

      {/* Mystical Background Effects */}
      {mysticOverlay && (
        <div className="fixed inset-0 pointer-events-none">
          <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 via-transparent to-indigo-500/5 animate-pulse"></div>
          {Array.from({ length: 50 }).map((_, i) => (
            <div
              key={i}
              className="absolute w-1 h-1 bg-purple-400 rounded-full animate-ping opacity-30"
              style={{
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 3}s`,
                animationDuration: `${2 + Math.random() * 3}s`
              }}
            />
          ))}
        </div>
      )}

      {/* Header */}
      <header className="relative border-b border-slate-800/50 backdrop-blur-xl bg-slate-900/30">
        <div className="max-w-7xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className={`text-3xl font-light tracking-wide transition-all duration-500 ${
                mysticOverlay 
                  ? 'text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-indigo-400' 
                  : 'text-slate-100'
              }`}>
                {mysticOverlay ? 'SupremeHead Oracle Nexus' : 'Command & Financial Center'}
              </h1>
              <p className="text-sm text-slate-400 mt-1">
                {mysticOverlay ? 'Where digital alchemy transforms vision into reality' : 'Real-time business intelligence & revenue management'}
              </p>
            </div>
            
            <div className="flex items-center space-x-6">
              <div className="text-right">
                <div className="text-2xl font-bold text-emerald-400">
                  {formatCurrency(totalBalance)}
                </div>
                <div className="text-xs text-slate-500">Total Portfolio Value</div>
              </div>
              
              <div className="h-8 w-px bg-slate-600"></div>
              
              <div className="text-right">
                <div className="text-lg font-semibold text-blue-400">
                  +{formatCurrency(dailyEarnings)}
                </div>
                <div className="text-xs text-slate-500">Today's Earnings</div>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* AI Oracle Suggestions with Psychological Triggers */}
      {aiSuggestion && (
        <div className={`mx-6 mt-4 p-4 rounded-xl border transition-all duration-500 ${
          aiSuggestion.urgency === 'critical' ? 'bg-red-950/50 border-red-500 animate-pulse' :
          aiSuggestion.urgency === 'high' ? 'bg-orange-950/50 border-orange-500' :
          'bg-blue-950/50 border-blue-500'
        }`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className={`w-3 h-3 rounded-full ${
                aiSuggestion.urgency === 'critical' ? 'bg-red-400 animate-ping' :
                aiSuggestion.urgency === 'high' ? 'bg-orange-400 animate-pulse' :
                'bg-blue-400'
              }`}></div>
              <span className="text-sm font-medium">
                {mysticOverlay ? '🔮 Oracle Insight' : '🤖 AI Recommendation'}
              </span>
              {scarcityTimer && (
                <span className="text-xs font-mono bg-red-900/50 px-2 py-1 rounded text-red-300">
                  ⏰ {formatTime(scarcityTimer)}
                </span>
              )}
            </div>
            <button className={`px-4 py-1 rounded text-xs font-medium ${
              aiSuggestion.urgency === 'critical' ? 'bg-red-600 hover:bg-red-500' :
              aiSuggestion.urgency === 'high' ? 'bg-orange-600 hover:bg-orange-500' :
              'bg-blue-600 hover:bg-blue-500'
            }`}>
              {aiSuggestion.urgency === 'critical' ? 'Act Now' : 'Implement'}
            </button>
          </div>
          <p className="text-sm text-slate-300 mt-2">{aiSuggestion.text}</p>
        </div>
      )}

      <div className="max-w-7xl mx-auto px-6 py-8">
        
        {/* Key Metrics Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-slate-900/50 border border-slate-700/50 rounded-xl p-6 backdrop-blur-sm">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-slate-400">Weekly Growth</h3>
              <span className="text-emerald-400">↗</span>
            </div>
            <div className="text-2xl font-bold text-emerald-400">+{weeklyGrowth.toFixed(1)}%</div>
          </div>
          
          <div className="bg-slate-900/50 border border-slate-700/50 rounded-xl p-6 backdrop-blur-sm">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-slate-400">Active Streams</h3>
              <span className="text-blue-400">⚡</span>
            </div>
            <div className="text-2xl font-bold text-blue-400">{revenueStreams.filter(s => s.status === 'active').length}/4</div>
          </div>

          <div className="bg-slate-900/50 border border-slate-700/50 rounded-xl p-6 backdrop-blur-sm">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-slate-400">AI Confidence</h3>
              <span className="text-purple-400">🧠</span>
            </div>
            <div className="text-2xl font-bold text-purple-400">92.7%</div>
          </div>

          <div className="bg-slate-900/50 border border-slate-700/50 rounded-xl p-6 backdrop-blur-sm">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-sm font-medium text-slate-400">Next Payout</h3>
              <span className="text-orange-400">💰</span>
            </div>
            <div className="text-lg font-bold text-orange-400">Today 6PM</div>
          </div>
        </div>

        {/* Revenue Streams */}
        <div className="mb-8">
          <h2 className="text-2xl font-semibold text-slate-200 mb-6">
            {mysticOverlay ? '⚡ Active Legion Operations' : '💼 Revenue Stream Portfolio'}
          </h2>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {revenueStreams.map((stream, index) => (
              <div
                key={stream.name}
                className={`relative bg-slate-900/30 border border-slate-700/50 rounded-xl p-6 transition-all duration-300 cursor-pointer hover:bg-slate-800/50 hover:border-slate-600/70 hover:shadow-xl ${
                  activeStream === stream.name ? `ring-2 ring-${stream.color}-500/50 bg-slate-800/60` : ''
                }`}
                onClick={() => setActiveStream(activeStream === stream.name ? null : stream.name)}
              >
                
                {/* Status & Growth Indicators */}
                <div className="flex items-center justify-between mb-4">
                  <div className={`px-3 py-1 rounded-full border text-xs font-medium ${getStatusColor(stream.status)}`}>
                    {stream.status.charAt(0).toUpperCase() + stream.status.slice(1)}
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-emerald-400 text-sm font-medium">+{stream.growth}%</span>
                    <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                  </div>
                </div>

                <div className="mb-4">
                  <h3 className="text-xl font-semibold text-slate-100 mb-1">{stream.name}</h3>
                  <p className="text-sm text-slate-400 mb-2">{stream.type}</p>
                  <p className="text-xs text-slate-500">{stream.description}</p>
                </div>

                <div className="space-y-3 mb-4">
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-slate-400">Revenue</span>
                    <span className="text-sm font-mono text-slate-300">{formatCurrency(stream.revenue)}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-slate-400">Region</span>
                    <span className="text-xs text-slate-300">{stream.region}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-slate-400">AI Confidence</span>
                    <span className="text-xs font-mono text-purple-400">{stream.aiConfidence}%</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-xs text-slate-400">Next Payout</span>
                    <span className="text-xs text-green-400">{stream.nextPayout}</span>
                  </div>
                </div>

                {activeStream === stream.name && (
                  <div className="border-t border-slate-700/50 pt-4 animate-fade-in">
                    <div className="grid grid-cols-2 gap-3 mb-4">
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          initiateWithdrawal(stream);
                        }}
                        className={`py-2 px-4 bg-gradient-to-r from-${stream.color}-600 to-${stream.color}-500 rounded-lg text-white text-sm font-medium hover:shadow-lg transition-all duration-300`}
                      >
                        💸 Withdraw 10%
                      </button>
                      <button className="py-2 px-4 bg-slate-700 hover:bg-slate-600 rounded-lg text-white text-sm font-medium transition-all duration-300">
                        📊 Analytics
                      </button>
                    </div>
                    
                    <div className="space-y-2 text-xs">
                      <div className="flex justify-between">
                        <span className="text-slate-400">Last Activity:</span>
                        <span className="text-slate-300">{stream.lastActivity}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Available:</span>
                        <span className="text-green-400">{formatCurrency(stream.revenue * 0.1)}</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Wallet Management */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          
          {/* Withdrawal Options */}
          <div className="bg-slate-900/30 border border-slate-700/50 rounded-xl p-6">
            <h3 className="text-xl font-semibold text-slate-200 mb-4">
              {mysticOverlay ? '🏦 Treasury Vaults' : '💳 Withdrawal Destinations'}
            </h3>
            
            <div className="space-y-4 mb-6">
              {walletOptions.map((wallet, index) => (
                <div key={index} className="p-4 bg-slate-800/50 rounded-lg border border-slate-700/30 hover:border-slate-600/50 transition-colors">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-slate-200">{wallet.name}</span>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${
                      wallet.type === 'hardware' ? 'bg-green-900/50 text-green-400' :
                      wallet.type === 'multisig' ? 'bg-blue-900/50 text-blue-400' :
                      'bg-orange-900/50 text-orange-400'
                    }`}>
                      {wallet.type}
                    </span>
                  </div>
                  <div className="text-xs text-slate-400 font-mono mb-1">{wallet.address}</div>
                  <div className="text-sm font-semibold text-slate-300">{wallet.balance}</div>
                </div>
              ))}
            </div>

            {/* Quick Actions */}
            <div className="grid grid-cols-2 gap-3">
              <button className="py-3 px-4 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg text-white font-medium hover:shadow-lg transition-all duration-300">
                💰 Quick Withdraw
              </button>
              <button className="py-3 px-4 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg text-white font-medium hover:shadow-lg transition-all duration-300">
                🛒 Order Equipment
              </button>
            </div>
          </div>

          {/* Market Intelligence */}
          <div className="bg-slate-900/30 border border-slate-700/50 rounded-xl p-6">
            <h3 className="text-xl font-semibold text-slate-200 mb-4">
         